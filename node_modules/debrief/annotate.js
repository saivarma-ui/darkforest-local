"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.annotateFields = annotateFields;
exports["default"] = annotate;

var _ast = require("./ast");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function annotateFields(object, fields, _seen) {
  var seen = _seen !== null && _seen !== void 0 ? _seen : new WeakSet();

  if (seen.has(object)) {
    return {
      type: 'CircularRefAnnotation',
      annotation: undefined
    };
  }

  seen.add(object); // Convert the object to a list of pairs

  var pairs = Object.entries(object); // If we want to annotate keys that are missing in the object, add an
  // explicit "undefined" value for those now, so we have a place in the
  // object to annotate

  var existingKeys = new Set(Object.keys(object));

  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 1),
          field = _step$value[0];

      if (!existingKeys.has(field)) {
        pairs.push([field, undefined]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper(fields),
      _step2;

  try {
    var _loop = function _loop() {
      var _step2$value = _slicedToArray(_step2.value, 2),
          field = _step2$value[0],
          ann = _step2$value[1];

      // prettier-ignore
      pairs = pairs.map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            v = _ref2[1];

        return field === k ? [k, typeof ann === 'string' ? annotate(v, ann, seen) : ann] : [k, v];
      });
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return annotatePairs(pairs, undefined, seen);
}

function annotatePairs(value, annotation, seen) {
  var pairs = value.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        v = _ref4[1];

    return {
      key: key,
      value: annotate(v, undefined, seen)
    };
  });
  return {
    type: 'ObjectAnnotation',
    pairs: pairs,
    annotation: annotation
  };
}

function annotate(value, annotation, _seen) {
  if (value === null || value === undefined || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || typeof value.getMonth === 'function') {
    return {
      type: 'ScalarAnnotation',
      value: value,
      annotation: annotation
    };
  }

  var ann = (0, _ast.asAnnotation)(value); // istanbul ignore else

  if (ann) {
    if (annotation === undefined) {
      return ann;
    } else if (ann.type === 'ObjectAnnotation') {
      return {
        type: 'ObjectAnnotation',
        pairs: ann.pairs,
        annotation: annotation
      };
    } else if (ann.type === 'ArrayAnnotation') {
      return {
        type: 'ArrayAnnotation',
        items: ann.items,
        annotation: annotation
      };
    } else if (ann.type === 'FunctionAnnotation') {
      return {
        type: 'FunctionAnnotation',
        annotation: annotation
      };
    } else if (ann.type === 'CircularRefAnnotation') {
      return {
        type: 'CircularRefAnnotation',
        annotation: annotation
      };
    } else {
      return {
        type: 'ScalarAnnotation',
        value: ann.value,
        annotation: annotation
      };
    }
  } else if (Array.isArray(value)) {
    var seen = _seen !== null && _seen !== void 0 ? _seen : new WeakSet();

    if (seen.has(value)) {
      return {
        type: 'CircularRefAnnotation',
        annotation: annotation
      };
    } else {
      seen.add(value);
    }

    var items = value.map(function (v) {
      return annotate(v, undefined, seen);
    });
    return {
      type: 'ArrayAnnotation',
      items: items,
      annotation: annotation
    };
  } else if (_typeof(value) === 'object') {
    var _seen2 = _seen !== null && _seen !== void 0 ? _seen : new WeakSet();

    if (_seen2.has(value)) {
      return {
        type: 'CircularRefAnnotation',
        annotation: annotation
      };
    } else {
      _seen2.add(value);
    }

    return annotatePairs(Object.entries(value), annotation, _seen2);
  } else if (typeof value === 'function') {
    return {
      type: 'FunctionAnnotation',
      annotation: annotation
    };
  } else {
    throw new Error('Unknown annotation');
  }
}