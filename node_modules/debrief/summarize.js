"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = summarize;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Walks the annotation tree and emits the annotation's key path within the
 * object tree, and the message as a series of messages (array of strings).
 */
function summarize(ann) {
  var keypath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var result = [];

  if (ann.type === 'ArrayAnnotation') {
    var items = ann.items;
    var index = 0;

    var _iterator = _createForOfIteratorHelper(items),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _ann = _step.value;
        result.push.apply(result, _toConsumableArray(summarize(_ann, [].concat(_toConsumableArray(keypath), [index++]))));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else if (ann.type === 'ObjectAnnotation') {
    var pairs = ann.pairs;

    var _iterator2 = _createForOfIteratorHelper(pairs),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var pair = _step2.value;
        result.push.apply(result, _toConsumableArray(summarize(pair.value, [].concat(_toConsumableArray(keypath), [pair.key]))));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  var annotation = ann.annotation;

  if (!annotation) {
    return result;
  }

  var prefix;

  if (keypath.length === 0) {
    prefix = '';
  } else if (keypath.length === 1) {
    prefix = typeof keypath[0] === 'number' ? "Value at index ".concat(keypath[0], ": ") : "Value at key ".concat(JSON.stringify(keypath[0]), ": ");
  } else {
    prefix = "Value at keypath ".concat(keypath.map(function (x) {
      return x.toString();
    }).join('.'), ": ");
  }

  return [].concat(result, ["".concat(prefix).concat(annotation)]);
}