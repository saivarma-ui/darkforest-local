"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeValue = serializeValue;
exports.serializeAnnotation = serializeAnnotation;
exports["default"] = serialize;

var _utils = require("./utils");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function serializeString(s) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 80;
  // Full string
  // Abbreviated to $maxlen i.e. "Vincent Driess..." [truncated]
  var ser = JSON.stringify(s);

  if (ser.length <= width) {
    return ser;
  } // Cut off a bit


  var truncated = s.substring(0, width - 15) + '...';
  ser = JSON.stringify(truncated) + ' [truncated]';
  return ser;
}

function serializeArray(value, prefix) {
  if (value.length === 0) {
    return '[]';
  }

  var result = [];

  var _iterator = _createForOfIteratorHelper(value),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;

      var _serializeAnnotation = serializeAnnotation(item, prefix + _utils.INDENT),
          _serializeAnnotation2 = _slicedToArray(_serializeAnnotation, 2),
          ser = _serializeAnnotation2[0],
          ann = _serializeAnnotation2[1];

      result.push(prefix + _utils.INDENT + ser + ',');

      if (ann !== undefined) {
        result.push((0, _utils.indent)(ann, prefix + _utils.INDENT));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return ['['].concat(result, [prefix + ']']).join('\n');
}

function serializeObject(pairs, prefix) {
  if (pairs.length === 0) {
    return '{}';
  }

  var result = [];

  var _iterator2 = _createForOfIteratorHelper(pairs),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var pair = _step2.value;
      var key = pair.key;
      var value = pair.value;
      var kser = serializeValue(key);
      var valPrefix = prefix + _utils.INDENT + ' '.repeat(kser.length + 2);

      var _serializeAnnotation3 = serializeAnnotation(value, prefix + _utils.INDENT),
          _serializeAnnotation4 = _slicedToArray(_serializeAnnotation3, 2),
          vser = _serializeAnnotation4[0],
          vann = _serializeAnnotation4[1];

      result.push(prefix + _utils.INDENT + kser + ': ' + vser + ',');

      if (vann !== undefined) {
        result.push((0, _utils.indent)(vann, valPrefix));
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return ['{'].concat(result, [prefix + '}']).join('\n');
}

function serializeValue(value) {
  // istanbul ignore else
  if (typeof value === 'string') {
    return serializeString(value);
  } else if (typeof value === 'number' || typeof value === 'boolean') {
    return value.toString();
  } else if (value === null) {
    return 'null';
  } else if (value === undefined) {
    return 'undefined';
  } else {
    var valueAsDate = (0, _utils.asDate)(value);

    if (valueAsDate !== null) {
      return "new Date(".concat(JSON.stringify(valueAsDate.toISOString()), ")");
    } else if (value instanceof Date) {
      // NOTE: Using `instanceof Date` is unreliable way of checking dates.
      // If this case occurs (and it didn't pass the prior isDate())
      // check, then this must be the case where it's an invalid date.
      return '(Invalid Date)';
    } else {
      return '(unserializable)';
    }
  }
}

function serializeAnnotation(ann) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var serialized;

  if (ann.type === 'ArrayAnnotation') {
    serialized = serializeArray(ann.items, prefix);
  } else if (ann.type === 'ObjectAnnotation') {
    serialized = serializeObject(ann.pairs, prefix);
  } else if (ann.type === 'FunctionAnnotation') {
    serialized = 'function() {}';
  } else if (ann.type === 'CircularRefAnnotation') {
    serialized = '<circular ref>';
  } else {
    serialized = serializeValue(ann.value);
  }

  var annotation = ann.annotation;

  if (annotation !== undefined) {
    var sep = '^'.repeat((0, _utils.isMultiline)(serialized) ? 1 : serialized.length);
    return [serialized, [sep, annotation].join((0, _utils.isMultiline)(annotation) ? '\n' : ' ')];
  } else {
    return [serialized, undefined];
  }
}

function serialize(ann) {
  var _serializeAnnotation5 = serializeAnnotation(ann),
      _serializeAnnotation6 = _slicedToArray(_serializeAnnotation5, 2),
      serialized = _serializeAnnotation6[0],
      annotation = _serializeAnnotation6[1];

  if (annotation !== undefined) {
    return "".concat(serialized, "\n").concat(annotation);
  } else {
    return "".concat(serialized);
  }
}