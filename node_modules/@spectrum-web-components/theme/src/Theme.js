/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { supportsAdoptingStyleSheets, } from '@spectrum-web-components/base';
import coreStyles from './theme.css.js';
const ScaleValues = ['medium', 'large'];
const ColorValues = ['light', 'lightest', 'dark', 'darkest'];
/**
 * @element sp-theme
 *
 * @slot - Content on which to apply the CSS Custom Properties defined by the current theme configuration
 */
export class Theme extends HTMLElement {
    constructor() {
        super();
        this._color = '';
        this._scale = '';
        this.trackedChildren = new Set();
        this._updateRequested = false;
        this._contextConsumers = new Map();
        this.attachShadow({ mode: 'open' });
        const node = document.importNode(Theme.template.content, true);
        this.shadowRoot.appendChild(node);
        this.shouldAdoptStyles();
        this.addEventListener('sp-query-theme', this.onQueryTheme);
        this.addEventListener('sp-language-context', this._handleContextPresence);
        this.updateComplete = this.__createDeferredPromise();
    }
    static get observedAttributes() {
        return ['color', 'scale', 'lang'];
    }
    attributeChangedCallback(attrName, old, value) {
        if (old === value) {
            return;
        }
        if (attrName === 'color') {
            this.color = value;
        }
        else if (attrName === 'scale') {
            this.scale = value;
        }
        else if (attrName === 'lang' && !!value) {
            this.lang = value;
            this._provideContext();
        }
    }
    requestUpdate() {
        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
            window.ShadyCSS.styleElement(this);
        }
        else {
            this.shouldAdoptStyles();
        }
    }
    get color() {
        const themeFragments = Theme.themeFragmentsByKind.get('color');
        const { name } = (themeFragments && themeFragments.get('default')) || {};
        return this._color || name || '';
    }
    set color(newValue) {
        if (newValue === this._color)
            return;
        const color = !!newValue && ColorValues.includes(newValue)
            ? newValue
            : this.color;
        if (color !== this._color) {
            this._color = color;
            this.requestUpdate();
        }
        if (color) {
            this.setAttribute('color', color);
        }
        else {
            this.removeAttribute('color');
        }
    }
    get scale() {
        const themeFragments = Theme.themeFragmentsByKind.get('scale');
        const { name } = (themeFragments && themeFragments.get('default')) || {};
        return this._scale || name || '';
    }
    set scale(newValue) {
        if (newValue === this._scale)
            return;
        const scale = !!newValue && ScaleValues.includes(newValue)
            ? newValue
            : this.scale;
        if (scale !== this._scale) {
            this._scale = scale;
            this.requestUpdate();
        }
        if (scale) {
            this.setAttribute('scale', scale);
        }
        else {
            this.removeAttribute('scale');
        }
    }
    get styles() {
        const themeKinds = [
            ...Theme.themeFragmentsByKind.keys(),
        ];
        const styles = themeKinds.reduce((acc, kind) => {
            const kindFragments = Theme.themeFragmentsByKind.get(kind);
            const addStyles = (name, kind) => {
                const currentStyles = kindFragments.get(name);
                if (currentStyles && (!kind || this.hasAttribute(kind))) {
                    acc.push(currentStyles.styles);
                }
            };
            if (kind === 'app' || kind === 'core') {
                addStyles(kind);
            }
            else {
                const { [kind]: name } = this;
                addStyles(name, kind);
            }
            return acc;
        }, []);
        return [...styles];
    }
    static get template() {
        if (!this.templateElement) {
            this.templateElement = document.createElement('template');
            this.templateElement.innerHTML = '<slot></slot>';
        }
        return this.templateElement;
    }
    __createDeferredPromise() {
        return new Promise((resolve) => {
            this.__resolve = resolve;
        });
    }
    onQueryTheme(event) {
        if (event.defaultPrevented) {
            return;
        }
        event.preventDefault();
        const { detail: theme } = event;
        theme.color = this.color || undefined;
        theme.scale = this.scale || undefined;
        theme.lang =
            this.lang || document.documentElement.lang || navigator.language;
    }
    connectedCallback() {
        this.shouldAdoptStyles();
        // Note, first update/render handles styleElement so we only call this if
        // connected after first update.
        /* c8 ignore next 3 */
        if (window.ShadyCSS !== undefined) {
            window.ShadyCSS.styleElement(this);
        }
        // Add `this` to the instances array.
        Theme.instances.add(this);
        const manageDir = () => {
            const { dir } = this;
            this.trackedChildren.forEach((el) => {
                el.setAttribute('dir', dir === 'rtl' ? dir : 'ltr');
            });
        };
        if (!this.observer) {
            this.observer = new MutationObserver(manageDir);
        }
        this.observer.observe(this, {
            attributes: true,
            attributeFilter: ['dir'],
        });
        if (!this.hasAttribute('dir')) {
            let dirParent = (this.assignedSlot ||
                this.parentNode);
            while (dirParent !== document.documentElement &&
                !(dirParent instanceof Theme)) {
                dirParent = (dirParent.assignedSlot || // step into the shadow DOM of the parent of a slotted node
                    dirParent.parentNode || // DOM Element detected
                    dirParent.host);
            }
            this.dir = dirParent.dir === 'rtl' ? dirParent.dir : 'ltr';
        }
        requestAnimationFrame(() => manageDir());
    }
    disconnectedCallback() {
        // Remove `this` to the instances array.
        Theme.instances.delete(this);
        this.observer.disconnect();
    }
    startManagingContentDirection(el) {
        this.trackedChildren.add(el);
    }
    stopManagingContentDirection(el) {
        this.trackedChildren.delete(el);
    }
    async shouldAdoptStyles() {
        if (!this._updateRequested) {
            this.updateComplete = this.__createDeferredPromise();
            this._updateRequested = true;
            this._updateRequested = await false;
            this.adoptStyles();
            this.__resolve(true);
        }
    }
    adoptStyles() {
        const styles = this.styles; // No test coverage on Edge
        // There are three separate cases here based on Shadow DOM support.
        // (1) shadowRoot polyfilled: use ShadyCSS
        // (2) shadowRoot.adoptedStyleSheets available: use it.
        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
        // rendering
        /* c8 ignore next */ if (window.ShadyCSS !== undefined &&
            !window.ShadyCSS.nativeShadow &&
            window.ShadyCSS.ScopingShim) {
            // For browsers using the shim, there seems to be one set of
            // processed styles per template, so it is hard to nest styles. So,
            // for those, we load in all style fragments and then switch using a
            // host selector (e.g. :host([color='dark']))
            const fragmentCSS = [];
            for (const [kind, fragments] of Theme.themeFragmentsByKind) {
                for (const [name, { styles }] of fragments) {
                    if (name === 'default')
                        continue;
                    let cssText = styles.cssText;
                    if (!Theme.defaultFragments.has(name)) {
                        cssText = cssText.replace(':host', `:host([${kind}='${name}'])`);
                    }
                    fragmentCSS.push(cssText);
                }
            }
            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(fragmentCSS, this.localName);
            window.ShadyCSS.prepareTemplate(Theme.template, this.localName);
        }
        else if (supportsAdoptingStyleSheets) {
            const styleSheets = [];
            for (const style of styles) {
                styleSheets.push(style.styleSheet);
            }
            this.shadowRoot.adoptedStyleSheets = styleSheets;
        }
        else {
            const styleNodes = this.shadowRoot.querySelectorAll('style');
            styleNodes.forEach((element) => element.remove());
            styles.forEach((s) => {
                const style = document.createElement('style');
                style.textContent = s.cssText;
                this.shadowRoot.appendChild(style);
            });
        }
    }
    static registerThemeFragment(name, kind, styles) {
        const fragmentMap = Theme.themeFragmentsByKind.get(kind) || new Map();
        if (fragmentMap.size === 0) {
            Theme.themeFragmentsByKind.set(kind, fragmentMap);
            // we're adding our first fragment for this kind, set as default
            fragmentMap.set('default', { name, styles });
            Theme.defaultFragments.add(name);
        }
        fragmentMap.set(name, { name, styles });
        Theme.instances.forEach((instance) => instance.shouldAdoptStyles());
    }
    _provideContext() {
        this._contextConsumers.forEach((consume) => consume(this.lang));
    }
    _handleContextPresence(event) {
        const target = event.composedPath()[0];
        if (this._contextConsumers.has(target)) {
            this._contextConsumers.delete(target);
        }
        else {
            this._contextConsumers.set(target, event.detail.callback);
            const callback = this._contextConsumers.get(target);
            if (callback) {
                callback(this.lang ||
                    document.documentElement.lang ||
                    navigator.language);
            }
        }
    }
}
Theme.themeFragmentsByKind = new Map();
Theme.defaultFragments = new Set(['core']);
Theme.instances = new Set();
Theme.registerThemeFragment('core', 'core', coreStyles);
//# sourceMappingURL=Theme.js.map