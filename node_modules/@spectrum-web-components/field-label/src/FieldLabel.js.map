{"version":3,"file":"FieldLabel.js","sourceRoot":"","sources":["FieldLabel.ts"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SizedMixin,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport type { Focusable } from '@spectrum-web-components/shared';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-asterisk100.js';\nimport asteriskIconStyles from '@spectrum-web-components/icon/src/spectrum-icon-asterisk.css.js';\n\nimport styles from './field-label.css.js';\n\ntype AcceptsFocusVisisble = HTMLElement & { forceFocusVisible?(): void };\n\n/**\n * @element sp-field-label\n *\n * @slot - text content of the label\n */\nexport class FieldLabel extends SizedMixin(SpectrumElement) {\n    public static get styles(): CSSResultArray {\n        return [styles, asteriskIconStyles];\n    }\n\n    /**\n     * @private\n     */\n    static instanceCount = 0;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: String })\n    public id = '';\n\n    @property({ type: String })\n    public for = '';\n\n    @property({ type: Boolean, reflect: true })\n    public required = false;\n\n    @query('slot')\n    public slotEl!: HTMLSlotElement;\n\n    @property({ type: String, reflect: true, attribute: 'side-aligned' })\n    public sideAligned?: 'start' | 'end';\n\n    private target?: HTMLElement;\n\n    private handleClick(event: Event): void {\n        if (!this.target || this.disabled || event.defaultPrevented) return;\n        this.target.focus();\n        const parent = this.getRootNode() as ShadowRoot;\n        const target = this.target as AcceptsFocusVisisble;\n        const targetParent = target.getRootNode() as ShadowRoot;\n        const targetHost = targetParent.host as AcceptsFocusVisisble;\n        if (targetParent === parent && target.forceFocusVisible) {\n            target.forceFocusVisible();\n        } else if (targetHost && targetHost.forceFocusVisible) {\n            targetHost.forceFocusVisible();\n        }\n    }\n\n    private async manageFor(): Promise<void> {\n        if (!this.for) {\n            return;\n        }\n        const parent = this.getRootNode() as HTMLElement;\n        const target = parent.querySelector(`#${this.for}`) as Focusable;\n        if (!target) {\n            return;\n        }\n        if (target.localName.search('-') > 0) {\n            await customElements.whenDefined(target.localName);\n        }\n        if (typeof target.updateComplete !== 'undefined') {\n            await target.updateComplete;\n        }\n        this.target = target.focusElement || target;\n        if (this.target) {\n            const targetParent = this.target.getRootNode() as HTMLElement;\n            if (targetParent === parent) {\n                this.target.setAttribute('aria-labelledby', this.id);\n            } else {\n                this.target.setAttribute('aria-label', this.labelText);\n            }\n        }\n        return Promise.resolve();\n    }\n\n    private get labelText(): string {\n        const assignedNodes = this.slotEl.assignedNodes({ flatten: true });\n        if (!assignedNodes.length) {\n            return '';\n        }\n        const labelText = assignedNodes.map((node) =>\n            (node.textContent || /* c8 ignore next */ '').trim()\n        );\n        return labelText.join(' ');\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <label>\n                <slot @slotchange=${this.manageFor}></slot>\n                ${this.required\n                    ? html`\n                          <sp-icon-asterisk100\n                              class=\"required-icon spectrum-UIIcon-Asterisk100\"\n                          ></sp-icon-asterisk100>\n                      `\n                    : html``}\n            </label>\n        `;\n    }\n\n    protected firstUpdated(changes: PropertyValues): void {\n        super.firstUpdated(changes);\n        if (!this.hasAttribute('id')) {\n            this.setAttribute(\n                'id',\n                `${this.tagName.toLowerCase()}-${FieldLabel.instanceCount++}`\n            );\n        }\n        this.addEventListener('click', this.handleClick);\n    }\n\n    protected updated(changes: PropertyValues): void {\n        super.updated(changes);\n        if (changes.has('for') || changes.has('id')) {\n            this.manageFor();\n        }\n    }\n}\n"]}