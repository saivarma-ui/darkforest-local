{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "sp-slider-handle.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sp-slider-handle",
          "declaration": {
            "name": "SliderHandle",
            "module": "/src/SliderHandle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "sp-slider.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "sp-slider",
          "declaration": {
            "name": "Slider",
            "module": "/src/Slider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "sync/sp-slider.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/HandleController.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HandleController",
          "members": [
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "Slider"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "handles",
              "type": {
                "text": "Map<string, SliderHandle>"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "model",
              "type": {
                "text": "ModelValue[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "handleOrder",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "draggingHandle",
              "type": {
                "text": "SliderHandle | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleRefMap",
              "type": {
                "text": "WeakMap<SliderHandle, HandleReference> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "HandleValueDictionary"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "inputForHandle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "HTMLInputElement | undefined"
                }
              },
              "parameters": [
                {
                  "name": "handle",
                  "type": {
                    "text": "SliderHandle"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValueFromHandle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "handle",
                  "type": {
                    "text": "SliderHandle"
                  },
                  "description": "Handle who's value needs validation"
                }
              ],
              "description": "It is possible for value attributes to be set programmatically. The <input>\nfor a particular slider needs to have an opportunity to validate any such\nvalues"
            },
            {
              "kind": "method",
              "name": "handleHasChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "handle",
                  "type": {
                    "text": "SliderHandle"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formattedValueForHandle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "model",
                  "type": {
                    "text": "ModelValue"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "formattedValues",
              "type": {
                "text": "Map<string, string>"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "focusElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "handleOrientation",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "waitForUpgrade",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "handle",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "extractModelFromLightDom",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeHandle",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "activeHandleInputId",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "activateHandle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getActiveHandleElements",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HandleComponents"
                }
              }
            },
            {
              "kind": "method",
              "name": "getHandleElements",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HandleReference"
                }
              },
              "parameters": [
                {
                  "name": "sliderHandle",
                  "type": {
                    "text": "SliderHandle"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearHandleComponentCache",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_boundingClientRect",
              "type": {
                "text": "DOMRect | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "boundingClientRect",
              "type": {
                "text": "DOMRect"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateBoundingRect",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "extractDataFromEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "DataFromPointerEvent"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "description": "Return the `input` and `model` associated with the event and\nwhether the `input` is a `resolvedInput` meaning it was acquired\nfrom the `model` rather than the event."
            },
            {
              "kind": "field",
              "name": "_activePointerEventData",
              "type": {
                "text": "DataFromPointerEvent | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePointerdown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePointerup",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePointermove",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "onInputChange",
              "privacy": "private",
              "description": "Keep the slider value property in sync with the input element's value"
            },
            {
              "kind": "field",
              "name": "onInputFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onInputBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onInputKeydown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "dispatchChangeEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "HTMLInputElement"
                  }
                },
                {
                  "name": "handle",
                  "type": {
                    "text": "SliderHandle"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "calculateHandlePosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent | MouseEvent"
                  }
                },
                {
                  "name": "model",
                  "type": {
                    "text": "ModelValue"
                  }
                },
                {
                  "description": ": PointerEvent on slider",
                  "name": ""
                }
              ],
              "description": "Returns the value under the cursor"
            },
            {
              "kind": "method",
              "name": "renderHandle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "model",
                  "type": {
                    "text": "ModelValue"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "zIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isMultiHandle",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trackSegments",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns a list of track segment [start, end] tuples where the values are\nnormalized to be between 0 and 1."
            },
            {
              "kind": "method",
              "name": "updateModel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleUpdatesComplete",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HandleController",
          "declaration": {
            "name": "HandleController",
            "module": "src/HandleController.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/Slider.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "variants",
          "type": {
            "text": "array"
          },
          "default": "['filled', 'ramp', 'range', 'tick']"
        },
        {
          "kind": "class",
          "description": "",
          "name": "Slider",
          "slots": [
            {
              "description": "text label for the Slider",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "handleController",
              "type": {
                "text": "Controller | undefined"
              },
              "privacy": "public",
              "default": "new HandleController(this)",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "editable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether to display a Number Field along side the slider UI",
              "attribute": "editable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_editable",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideStepper",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the stepper UI of the Number Field is hidden or not",
              "attribute": "hide-stepper",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "variant",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "attribute": "variant"
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "HandleValueDictionary"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "handleName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "_variant",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "getAriaValueText",
              "type": {
                "text": "(values: Map<string, string>) => string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ariaValueText",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "labelVisibility",
              "type": {
                "text": "'text' | 'value' | 'none' | undefined"
              },
              "privacy": "public",
              "attribute": "label-visibility",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | 'previous' | undefined"
              },
              "privacy": "public",
              "attribute": "min",
              "reflects": true,
              "default": "0",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | 'next' | undefined"
              },
              "privacy": "public",
              "attribute": "max",
              "reflects": true,
              "default": "100",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "public",
              "attribute": "step",
              "reflects": true,
              "default": "1",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickStep",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "attribute": "tick-step"
            },
            {
              "kind": "field",
              "name": "tickLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "tick-labels"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "numberField",
              "type": {
                "text": "NumberField"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "track",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "numberFormat",
              "type": {
                "text": "NumberFormatter | undefined"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderRamp",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderTrackSegment",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderTrack",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "handlePointerdown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePointermove",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePointerup",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleNumberInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: NumberField }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleNumberChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event & { target: NumberField }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trackSegmentStyles",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_numberFieldInput",
              "type": {
                "text": "Promise<unknown>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              }
            },
            {
              "kind": "field",
              "name": "_forcedUnit",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "value",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "dragging",
              "reflects": true,
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "highlight",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "attribute": "name",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "resolvedLanguage",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "type": {
                "text": "NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "attribute": "format-options",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "attribute": "label",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "getAriaHandleText",
              "type": {
                "text": "(\n        value: number,\n        numberFormat: NumberFormatter\n    ) => string"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "normalization",
              "type": {
                "text": "SliderNormalization"
              },
              "privacy": "public",
              "default": "{\n    toNormalized(value: number, min: number, max: number) {\n        return (value - min) / (max - min);\n    },\n    fromNormalized(value: number, min: number, max: number) {\n        return value * (max - min) + min;\n    },\n}",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "method",
              "name": "dispatchInputEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "field",
              "name": "_numberFormatCache",
              "type": {
                "text": "| { numberFormat: NumberFormatter; language: string }\n        | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "method",
              "name": "getNumberFormat",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Intl.NumberFormat"
                }
              },
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolveLanguage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "editable",
              "type": {
                "text": "boolean"
              },
              "description": "Whether to display a Number Field along side the slider UI",
              "fieldName": "editable"
            },
            {
              "name": "hide-stepper",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the stepper UI of the Number Field is hidden or not",
              "fieldName": "hideStepper"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "type"
            },
            {
              "name": "variant",
              "type": {
                "text": "string"
              },
              "fieldName": "variant"
            },
            {
              "name": "label-visibility",
              "type": {
                "text": "'text' | 'value' | 'none' | undefined"
              },
              "fieldName": "labelVisibility"
            },
            {
              "name": "min",
              "type": {
                "text": "number | 'previous' | undefined"
              },
              "fieldName": "min",
              "default": "0",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number | 'next' | undefined"
              },
              "fieldName": "max",
              "default": "100",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "step",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "step",
              "default": "1",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "tick-step",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tickStep"
            },
            {
              "name": "tick-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "tickLabels"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dragging",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "highlight",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "format-options",
              "type": {
                "text": "NumberFormatOptions | undefined"
              },
              "fieldName": "formatOptions",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ObserveSlotText",
              "package": "@spectrum-web-components/shared/src/observe-slot-text.js"
            }
          ],
          "superclass": {
            "name": "SliderHandle",
            "module": "/src/SliderHandle.js"
          },
          "tagName": "sp-slider",
          "customElement": true,
          "events": [
            {
              "name": "sp-slider-handle-ready",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "description": "The value of the element has changed.",
              "name": "input",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            },
            {
              "description": "An alteration to the value of the element has been committed by the user.",
              "name": "change",
              "inheritedFrom": {
                "name": "SliderHandle",
                "module": "src/SliderHandle.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "variants",
          "declaration": {
            "name": "variants",
            "module": "src/Slider.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slider",
          "declaration": {
            "name": "Slider",
            "module": "src/Slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/SliderHandle.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultNormalization",
          "type": {
            "text": "SliderNormalization"
          },
          "default": "{\n    toNormalized(value: number, min: number, max: number) {\n        return (value - min) / (max - min);\n    },\n    fromNormalized(value: number, min: number, max: number) {\n        return value * (max - min) + min;\n    },\n}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "SliderHandle",
          "members": [
            {
              "kind": "field",
              "name": "handleController",
              "type": {
                "text": "Controller | undefined"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "handleName",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "focusElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_forcedUnit",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "dragging",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "highlight"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | 'previous' | undefined"
              },
              "privacy": "public",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | 'next' | undefined"
              },
              "privacy": "public",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resolvedLanguage",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "public",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "type": {
                "text": "NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "attribute": "format-options"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "getAriaHandleText",
              "type": {
                "text": "(\n        value: number,\n        numberFormat: NumberFormatter\n    ) => string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "normalization",
              "type": {
                "text": "SliderNormalization"
              },
              "privacy": "public",
              "default": "{\n    toNormalized(value: number, min: number, max: number) {\n        return (value - min) / (max - min);\n    },\n    fromNormalized(value: number, min: number, max: number) {\n        return value * (max - min) + min;\n    },\n}"
            },
            {
              "kind": "method",
              "name": "dispatchInputEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_numberFormatCache",
              "type": {
                "text": "| { numberFormat: NumberFormatter; language: string }\n        | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getNumberFormat",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Intl.NumberFormat"
                }
              }
            },
            {
              "kind": "field",
              "name": "numberFormat",
              "type": {
                "text": "NumberFormatter | undefined"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "resolveLanguage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "name": "sp-slider-handle-ready",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The value of the element has changed.",
              "name": "input"
            },
            {
              "description": "An alteration to the value of the element has been committed by the user.",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "value"
            },
            {
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dragging"
            },
            {
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "highlight"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "min",
              "type": {
                "text": "number | 'previous' | undefined"
              },
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | 'next' | undefined"
              },
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "step"
            },
            {
              "name": "format-options",
              "type": {
                "text": "NumberFormatOptions | undefined"
              },
              "fieldName": "formatOptions"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "Focusable",
            "package": "@spectrum-web-components/shared/src/focusable.js"
          },
          "tagName": "sp-slider-handle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultNormalization",
          "declaration": {
            "name": "defaultNormalization",
            "module": "src/SliderHandle.ts"
          }
        },
        {
          "kind": "js",
          "name": "SliderHandle",
          "declaration": {
            "name": "SliderHandle",
            "module": "src/SliderHandle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./Slider.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./SliderHandle.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./HandleController.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider.css.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\n:host{--spectrum-slider-tick-mark-width:var(\n--spectrum-slider-m-tick-mark-width,var(--spectrum-alias-border-size-thick)\n);--spectrum-slider-tick-mark-height:var(\n--spectrum-slider-m-tick-mark-height,var(--spectrum-global-dimension-size-125)\n);--spectrum-slider-tick-mark-border-radius:var(\n--spectrum-slider-m-tick-mark-border-radius,var(--spectrum-alias-border-radius-xsmall)\n);--spectrum-slider-track-border-radius:var(\n--spectrum-slider-m-track-border-radius,var(--spectrum-global-dimension-static-size-10)\n);--spectrum-slider-track-height:var(\n--spectrum-slider-m-track-height,var(--spectrum-alias-border-size-thick)\n);--spectrum-slider-handle-width:var(\n--spectrum-slider-m-handle-width,var(--spectrum-alias-control-two-size-l)\n);--spectrum-slider-handle-height:var(\n--spectrum-slider-m-handle-height,var(--spectrum-alias-control-two-size-l)\n);--spectrum-slider-handle-gap:var(\n--spectrum-slider-m-handle-gap,var(--spectrum-alias-border-size-thicker)\n);--spectrum-slider-handle-border-size:var(\n--spectrum-slider-m-handle-border-size,var(--spectrum-alias-border-size-thick)\n);--spectrum-slider-handle-border-radius:var(\n--spectrum-slider-m-handle-border-radius,var(--spectrum-global-dimension-size-100)\n);--spectrum-slider-height:var(\n--spectrum-slider-m-height,var(--spectrum-global-dimension-size-400)\n);--spectrum-slider-min-width:var(\n--spectrum-slider-m-min-width,var(--spectrum-global-dimension-size-1250)\n);--spectrum-slider-animation-duration:var(\n--spectrum-slider-m-animation-duration,var(--spectrum-global-animation-duration-100)\n);--spectrum-slider-ramp-track-color-disabled:var(\n--spectrum-slider-m-ramp-track-color-disabled,var(--spectrum-global-color-gray-300)\n);--spectrum-slider-ramp-track-height:var(\n--spectrum-slider-m-ramp-track-height,var(--spectrum-global-dimension-size-200)\n);--spectrum-slider-label-gap-y:var(--spectrum-global-dimension-size-85);--spectrum-slider-controls-margin:calc(var(--spectrum-slider-handle-width)/2);--spectrum-slider-track-margin-offset:calc(var(--spectrum-slider-controls-margin)*-1);--spectrum-slider-handle-margin-top:calc(var(--spectrum-slider-handle-width)/-2);--spectrum-slider-handle-margin-left:calc(var(--spectrum-slider-handle-width)/-2);--spectrum-slider-track-handleoffset:var(--spectrum-slider-handle-gap);--spectrum-slider-track-middle-handleoffset:calc(var(--spectrum-slider-handle-gap) + var(--spectrum-slider-handle-width)/2);--spectrum-slider-input-top:calc(var(--spectrum-slider-handle-margin-top)/4);--spectrum-slider-input-left:calc(var(--spectrum-slider-handle-margin-left)/4);--spectrum-slider-ramp-margin-top:0;--spectrum-slider-range-track-reset:0;--spectrum-slide-label-text-size:var(\n--spectrum-global-dimension-font-size-75\n);--spectrum-slide-label-text-line-height:var(\n--spectrum-global-font-line-height-small,1.3\n);--spectrum-slide-label-margin-bottom:-3px;--spectrum-slider-label-gap-x:var(\n--spectrum-alias-item-control-gap-m,var(--spectrum-global-dimension-size-125)\n)}:host{display:block;min-height:var(--spectrum-slider-height);min-width:var(--spectrum-slider-min-width);position:relative;-webkit-user-select:none;user-select:none;z-index:1}:host([dir=ltr]) #controls{margin-left:var(\n--spectrum-slider-controls-margin\n)}:host([dir=rtl]) #controls{margin-right:var(\n--spectrum-slider-controls-margin\n)}#controls{box-sizing:border-box;display:inline-block;min-height:var(--spectrum-slider-height);position:relative;vertical-align:top;width:calc(100% - var(--spectrum-slider-controls-margin)*2);z-index:auto}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{left:0}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{right:0}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{right:auto}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{left:auto}#fill,.track{box-sizing:border-box;height:var(\n--spectrum-slider-track-height\n);margin-top:calc(var(--spectrum-slider-track-height)/-2);pointer-events:none;position:absolute;top:calc(var(--spectrum-slider-height)/2);z-index:1}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{padding-left:0;padding-right:var(--spectrum-slider-track-handleoffset)}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{padding-left:var(--spectrum-slider-track-handleoffset);padding-right:0}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}#fill,.track{padding-bottom:0;padding-top:0}#fill:before,.track:before{border-radius:var(--spectrum-slider-track-border-radius);content:\"\";display:block;height:100%}:host([dir=ltr]) #fill{margin-left:0}:host([dir=rtl]) #fill{margin-right:0}:host([dir=ltr]) #fill{padding-left:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset));padding-right:0}:host([dir=rtl]) #fill{padding-left:0;padding-right:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset))}#fill{padding-bottom:0;padding-top:0}:host([dir=ltr]) .spectrum-Slider-fill--right{padding-left:0;padding-right:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset))}:host([dir=rtl]) .spectrum-Slider-fill--right{padding-left:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset));padding-right:0}.spectrum-Slider-fill--right{padding-bottom:0;padding-top:0}:host([dir=ltr]) .track~.track{left:auto}:host([dir=rtl]) .track~.track{right:auto}:host([dir=ltr]) .track~.track{right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl]) .track~.track{left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr]) .track~.track{padding-left:var(\n--spectrum-slider-track-handleoffset\n);padding-right:0}:host([dir=rtl]) .track~.track{padding-left:0;padding-right:var(\n--spectrum-slider-track-handleoffset\n)}:host([dir=ltr]) .track~.track{margin-left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl]) .track~.track{margin-right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr]) .track~.track{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) .track~.track{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}.track~.track{padding-bottom:0;padding-top:0}:host([variant=range]) #value{-webkit-user-select:text;user-select:text}:host([dir=ltr][variant=range]) .track:first-of-type{padding-left:0;padding-right:var(--spectrum-slider-track-handleoffset)}:host([dir=rtl][variant=range]) .track:first-of-type{padding-left:var(--spectrum-slider-track-handleoffset);padding-right:0}:host([dir=ltr][variant=range]) .track:first-of-type{left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl][variant=range]) .track:first-of-type{right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr][variant=range]) .track:first-of-type{right:auto}:host([dir=rtl][variant=range]) .track:first-of-type{left:auto}:host([dir=ltr][variant=range]) .track:first-of-type{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl][variant=range]) .track:first-of-type{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}:host([variant=range]) .track:first-of-type{padding-bottom:0;padding-top:0}:host([dir=ltr][variant=range]) [dir=ltr] .track,:host([dir=ltr][variant=range]) [dir=rtl] .track{left:auto}:host([dir=ltr][variant=range]) [dir=rtl] .track,:host([dir=rtl][variant=range]) [dir=rtl] .track{right:auto}:host([dir=ltr][variant=range]) [dir=ltr] .track,:host([dir=ltr][variant=range]) [dir=rtl] .track{right:auto}:host([dir=ltr][variant=range]) [dir=rtl] .track,:host([dir=rtl][variant=range]) [dir=rtl] .track{left:auto}:host([dir=ltr][variant=range]) .track,:host([dir=rtl][variant=range]) .track{padding-bottom:0;padding-left:var(--spectrum-slider-track-middle-handleoffset);padding-right:var(--spectrum-slider-track-middle-handleoffset);padding-top:0}:host([dir=ltr][variant=range]) .track:last-of-type{padding-left:var(\n--spectrum-slider-track-handleoffset\n);padding-right:0}:host([dir=rtl][variant=range]) .track:last-of-type{padding-left:0;padding-right:var(\n--spectrum-slider-track-handleoffset\n)}:host([dir=ltr][variant=range]) .track:last-of-type{left:auto}:host([dir=rtl][variant=range]) .track:last-of-type{right:auto}:host([dir=ltr][variant=range]) .track:last-of-type{right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl][variant=range]) .track:last-of-type{left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr][variant=range]) .track:last-of-type{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl][variant=range]) .track:last-of-type{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}:host([variant=range]) .track:last-of-type{padding-bottom:0;padding-top:0}:host([dir=ltr]) #ramp{left:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) #ramp{right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=ltr]) #ramp{right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) #ramp{left:var(\n--spectrum-slider-track-margin-offset\n)}#ramp{height:var(--spectrum-slider-ramp-track-height);margin-top:var(\n--spectrum-slider-ramp-margin-top\n);position:absolute;top:calc(var(--spectrum-slider-ramp-track-height)/2)}:host([dir=rtl]) #ramp svg{transform:matrix(-1,0,0,1,0,0)}#ramp svg{height:100%;width:100%}:host([dir=ltr]) .handle{left:0}:host([dir=rtl]) .handle{right:0}:host([dir=ltr]) .handle{margin-left:calc(var(--spectrum-slider-handle-width)/-2);margin-right:0}:host([dir=rtl]) .handle{margin-left:0;margin-right:calc(var(--spectrum-slider-handle-width)/-2)}.handle{border-radius:var(--spectrum-slider-handle-border-radius);border-style:solid;border-width:var(--spectrum-slider-handle-border-size);box-sizing:border-box;display:inline-block;height:var(--spectrum-slider-handle-height);margin-bottom:0;margin-top:var(--spectrum-slider-handle-margin-top);outline:none;position:absolute;top:calc(var(--spectrum-slider-height)/2);transition:border-width var(--spectrum-slider-animation-duration) ease-in-out;width:var(--spectrum-slider-handle-width);z-index:2}.handle.dragging,.handle.handle-highlight,.handle:active{border-width:var(\n--spectrum-slider-handle-border-size\n)}.handle.dragging,.handle.handle-highlight,.handle.is-tophandle,.handle:active{z-index:3}.handle:before{border-radius:100%;content:\" \";display:block;height:var(--spectrum-slider-handle-height);left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);transition:box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out,width var(--spectrum-global-animation-duration-100,.13s) ease-out,height var(--spectrum-global-animation-duration-100,.13s) ease-out;width:var(--spectrum-slider-handle-width)}.handle.handle-highlight:before{height:calc(var(--spectrum-slider-handle-height) + var(\n--spectrum-alias-focus-ring-gap,\nvar(--spectrum-global-dimension-static-size-25)\n)*2);width:calc(var(--spectrum-slider-handle-width) + var(\n--spectrum-alias-focus-ring-gap,\nvar(--spectrum-global-dimension-static-size-25)\n)*2)}:host([dir=ltr]) .input{left:var(\n--spectrum-slider-input-left\n)}:host([dir=rtl]) .input{right:var(\n--spectrum-slider-input-left\n)}.input{-webkit-appearance:none;border:0;cursor:default;height:var(--spectrum-slider-handle-height);margin:0;opacity:.000001;overflow:hidden;padding:0;pointer-events:none;position:absolute;top:var(--spectrum-slider-input-top);width:var(--spectrum-slider-handle-width)}.input:focus{outline:none}#label-container{display:flex;font-size:var(--spectrum-slide-label-text-size);line-height:var(--spectrum-slide-label-text-line-height);margin-bottom:var(--spectrum-slide-label-margin-bottom);padding-top:var(\n--spectrum-fieldlabel-m-padding-top,var(--spectrum-global-dimension-size-50)\n);position:relative;width:auto}:host([dir=ltr]) #label{padding-left:0}:host([dir=rtl]) #label{padding-right:0}#label{flex-grow:1}:host([dir=ltr]) #value{padding-right:0}:host([dir=rtl]) #value{padding-left:0}:host([dir=ltr]) #value{text-align:right}:host([dir=rtl]) #value{text-align:left}#value{font-feature-settings:\"tnum\";cursor:default;flex-grow:0}:host([dir=ltr]) #value{margin-left:var(\n--spectrum-slider-label-gap-x\n)}:host([dir=rtl]) #value{margin-right:var(\n--spectrum-slider-label-gap-x\n)}.ticks{display:flex;justify-content:space-between;margin:0 var(--spectrum-slider-track-margin-offset);margin-top:calc(var(--spectrum-slider-tick-mark-height) + var(--spectrum-slider-track-height)/2);z-index:0}.tick{position:relative;width:var(--spectrum-slider-tick-mark-width)}:host([dir=ltr]) .tick:after{left:calc(50% - var(--spectrum-slider-tick-mark-width)/2)}:host([dir=rtl]) .tick:after{right:calc(50% - var(--spectrum-slider-tick-mark-width)/2)}.tick:after{border-radius:var(--spectrum-slider-tick-mark-border-radius);content:\"\";display:block;height:var(--spectrum-slider-tick-mark-height);position:absolute;top:0;width:var(--spectrum-slider-tick-mark-width)}.tick .tickLabel{align-items:center;display:flex;font-size:var(--spectrum-slide-label-text-size);justify-content:center;line-height:var(--spectrum-slide-label-text-line-height);margin-bottom:0;margin-left:calc(var(--spectrum-slider-label-gap-x)*-1);margin-right:calc(var(--spectrum-slider-label-gap-x)*-1);margin-top:calc(var(--spectrum-slider-label-gap-y) + var(--spectrum-slider-tick-mark-height))}.tick:first-of-type .tickLabel,.tick:last-of-type .tickLabel{display:block;margin-left:0;margin-right:0;position:absolute}:host([dir=ltr]) .tick:first-of-type{left:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=rtl]) .tick:first-of-type{right:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=ltr]) .tick:first-of-type .tickLabel{left:0}:host([dir=rtl]) .tick:first-of-type .tickLabel{right:0}:host([dir=ltr]) .tick:last-of-type{right:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=rtl]) .tick:last-of-type{left:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=ltr]) .tick:last-of-type .tickLabel{right:0}:host([dir=rtl]) .tick:last-of-type .tickLabel{left:0}:host([disabled]){cursor:default}:host([disabled]) .handle{cursor:default;pointer-events:none}.spectrum-Slider-handleContainer,.spectrum-Slider-trackContainer{margin-left:calc(var(--spectrum-slider-handle-width)/2*-1);position:absolute;top:calc(var(--spectrum-slider-track-height)/2 - 1px);width:calc(100% + var(--spectrum-slider-handle-width))}.spectrum-Slider-trackContainer{height:var(--spectrum-slider-height);overflow:hidden}:host{--spectrum-slider-m-focus-ring-size:var(\n--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)\n);--spectrum-slider-m-handle-border-color-key-focus:var(\n--spectrum-global-color-gray-800\n);--spectrum-slider-m-handle-focus-ring-color-key-focus:var(\n--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400)\n);--spectrum-slider-m-label-text-color:var(\n--spectrum-alias-label-text-color,var(--spectrum-global-color-gray-700)\n);--spectrum-slider-m-label-text-color-disabled:var(\n--spectrum-alias-text-color-disabled,var(--spectrum-global-color-gray-500)\n)}.track:before{background:var(\n--spectrum-slider-m-track-color,var(--spectrum-global-color-gray-400)\n)}#label-container{color:var(\n--spectrum-slider-m-label-text-color\n)}:host([variant=filled]) .track:first-child:before{background:var(\n--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700)\n)}#fill:before{background:var(\n--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700)\n)}#ramp path{fill:var(\n--spectrum-slider-m-track-color,var(--spectrum-global-color-gray-400)\n)}.handle{background:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);border-color:var(\n--spectrum-slider-m-handle-border-color,var(--spectrum-global-color-gray-700)\n)}.handle:hover{border-color:var(\n--spectrum-slider-m-handle-border-color-hover,var(--spectrum-global-color-gray-800)\n)}.handle.handle-highlight{border-color:var(\n--spectrum-slider-m-handle-border-color-key-focus,var(--spectrum-global-color-gray-800)\n)}.handle.handle-highlight:before{box-shadow:0 0 0 var(\n--spectrum-slider-m-focus-ring-size,var(--spectrum-alias-focus-ring-size)\n) var(--spectrum-slider-m-handle-focus-ring-color-key-focus)}.handle.dragging,.handle:active{border-color:var(\n--spectrum-slider-m-handle-border-color-down,var(--spectrum-global-color-gray-800)\n)}:host([variant=ramp]) .handle{box-shadow:0 0 0 4px var(\n--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100)\n)}.input{background:transparent}.tick:after{background-color:var(\n--spectrum-slider-m-tick-mark-color,var(--spectrum-global-color-gray-400)\n)}.handle.dragging{background:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);border-color:var(\n--spectrum-slider-m-handle-border-color-down,var(--spectrum-global-color-gray-800)\n)}:host([variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(\n--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700)\n)}:host([disabled]) #label-container{color:var(\n--spectrum-slider-m-label-text-color-disabled\n)}:host([disabled]) .handle{background:var(\n--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100)\n);border-color:var(\n--spectrum-slider-m-handle-border-color-disabled,var(--spectrum-global-color-gray-400)\n)}:host([disabled]) .handle:active,:host([disabled]) .handle:hover{background:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);border-color:var(\n--spectrum-slider-m-handle-border-color-disabled,var(--spectrum-global-color-gray-400)\n)}:host([disabled]) .track:before{background:var(\n--spectrum-slider-m-track-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host([disabled][variant=filled]) .track:first-child:before{background:var(\n--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host([disabled]) #fill:before{background:var(\n--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host([disabled]) #ramp path{fill:var(\n--spectrum-slider-ramp-track-color-disabled\n)}:host([disabled][variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(\n--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host{--spectrum-slider-handle-default-background-color:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);--spectrum-slider-handle-default-border-color:var(\n--spectrum-slider-m-handle-border-color,var(--spectrum-global-color-gray-700)\n)}sp-field-label{padding-bottom:0;padding-top:0}:host(:focus){outline:0}:host([editable]){display:grid;grid-template-areas:\"label .\" \"slider number\";grid-template-columns:1fr auto}:host([editable]) #label-container{grid-area:label}:host([editable]) #label-container+div{grid-area:slider}:host([editable]) sp-number-field{--spectrum-stepper-width:var(\n--spectrum-slider-editable-number-field-width,var(--spectrum-global-dimension-size-1000)\n);grid-area:number}:host([hide-stepper]) sp-number-field{--spectrum-stepper-width:var(\n--spectrum-slider-editable-number-field-width,var(--spectrum-global-dimension-size-900)\n)}:host([editable][dir=ltr]) sp-number-field{margin-left:var(--spectrum-global-dimension-size-200)}:host([editable][dir=rtl]) sp-number-field{margin-right:var(--spectrum-global-dimension-size-200)}:host([editable]) output{opacity:0}:host([disabled]){pointer-events:none}#track,:host([dragging]){touch-action:none;-webkit-user-select:none;user-select:none}.not-exact.ticks{justify-content:start}:host([dir=ltr]) .not-exact .tick{padding-right:var(--sp-slider-tick-offset)}:host([dir=rtl]) .not-exact .tick{padding-left:var(--sp-slider-tick-offset)}:host([dir=ltr]) .not-exact .tick:after{left:auto;transform:translate(-50%)}:host([dir=rtl]) .not-exact .tick:after{right:auto;transform:translate(50%)}.track:before{background-size:var(--spectrum-slider-track-background-size)!important}:host([dir=ltr]) .track:before{background:var(\n--spectrum-slider-track-color,var(--spectrum-global-color-gray-300)\n)}:host([dir=rtl]) .track:before{background:var(\n--spectrum-slider-track-color-rtl,var(\n--spectrum-slider-track-color,var(--spectrum-global-color-gray-300)\n)\n)}:host([dir=ltr]) .track:last-of-type:before{background-position:100%}:host([dir=rtl]) .track:first-of-type:before{background-position:100%}.track:not(:first-of-type):not(:last-of-type){padding-left:calc(var(--spectrum-slider-handle-width)/2 + var(--spectrum-slider-track-handleoffset))!important;padding-right:calc(var(--spectrum-slider-handle-width)/2 + var(--spectrum-slider-track-handleoffset))!important}:host([dir=ltr][variant=range]) .track,:host([dir=rtl][variant=range]) .track{margin:var(--spectrum-slider-range-track-reset);margin-top:calc(var(--spectrum-slider-track-height)/-2)}:host([dir=ltr]) .track:not(:first-of-type):not(:last-of-type){left:var(--spectrum-slider-track-segment-position)}:host([dir=rtl]) .track:not(:first-of-type):not(:last-of-type){right:var(--spectrum-slider-track-segment-position)}.visually-hidden{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}:host([label-visibility=value][dir=ltr]) #value{margin-left:auto}:host([label-visibility=value][dir=rtl]) #value{margin-right:auto}:host([label-visibility=none]) #label-container{margin:0;padding:0}\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "styles",
            "module": "src/slider.css.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/spectrum-slider.css.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\n:host{--spectrum-slider-tick-mark-width:var(\n--spectrum-slider-m-tick-mark-width,var(--spectrum-alias-border-size-thick)\n);--spectrum-slider-tick-mark-height:var(\n--spectrum-slider-m-tick-mark-height,var(--spectrum-global-dimension-size-125)\n);--spectrum-slider-tick-mark-border-radius:var(\n--spectrum-slider-m-tick-mark-border-radius,var(--spectrum-alias-border-radius-xsmall)\n);--spectrum-slider-track-border-radius:var(\n--spectrum-slider-m-track-border-radius,var(--spectrum-global-dimension-static-size-10)\n);--spectrum-slider-track-height:var(\n--spectrum-slider-m-track-height,var(--spectrum-alias-border-size-thick)\n);--spectrum-slider-handle-width:var(\n--spectrum-slider-m-handle-width,var(--spectrum-alias-control-two-size-l)\n);--spectrum-slider-handle-height:var(\n--spectrum-slider-m-handle-height,var(--spectrum-alias-control-two-size-l)\n);--spectrum-slider-handle-gap:var(\n--spectrum-slider-m-handle-gap,var(--spectrum-alias-border-size-thicker)\n);--spectrum-slider-handle-border-size:var(\n--spectrum-slider-m-handle-border-size,var(--spectrum-alias-border-size-thick)\n);--spectrum-slider-handle-border-radius:var(\n--spectrum-slider-m-handle-border-radius,var(--spectrum-global-dimension-size-100)\n);--spectrum-slider-height:var(\n--spectrum-slider-m-height,var(--spectrum-global-dimension-size-400)\n);--spectrum-slider-min-width:var(\n--spectrum-slider-m-min-width,var(--spectrum-global-dimension-size-1250)\n);--spectrum-slider-animation-duration:var(\n--spectrum-slider-m-animation-duration,var(--spectrum-global-animation-duration-100)\n);--spectrum-slider-ramp-track-color-disabled:var(\n--spectrum-slider-m-ramp-track-color-disabled,var(--spectrum-global-color-gray-300)\n);--spectrum-slider-ramp-track-height:var(\n--spectrum-slider-m-ramp-track-height,var(--spectrum-global-dimension-size-200)\n);--spectrum-slider-label-gap-y:var(--spectrum-global-dimension-size-85);--spectrum-slider-controls-margin:calc(var(--spectrum-slider-handle-width)/2);--spectrum-slider-track-margin-offset:calc(var(--spectrum-slider-controls-margin)*-1);--spectrum-slider-handle-margin-top:calc(var(--spectrum-slider-handle-width)/-2);--spectrum-slider-handle-margin-left:calc(var(--spectrum-slider-handle-width)/-2);--spectrum-slider-track-handleoffset:var(--spectrum-slider-handle-gap);--spectrum-slider-track-middle-handleoffset:calc(var(--spectrum-slider-handle-gap) + var(--spectrum-slider-handle-width)/2);--spectrum-slider-input-top:calc(var(--spectrum-slider-handle-margin-top)/4);--spectrum-slider-input-left:calc(var(--spectrum-slider-handle-margin-left)/4);--spectrum-slider-ramp-margin-top:0;--spectrum-slider-range-track-reset:0;--spectrum-slide-label-text-size:var(\n--spectrum-global-dimension-font-size-75\n);--spectrum-slide-label-text-line-height:var(\n--spectrum-global-font-line-height-small,1.3\n);--spectrum-slide-label-margin-bottom:-3px;--spectrum-slider-label-gap-x:var(\n--spectrum-alias-item-control-gap-m,var(--spectrum-global-dimension-size-125)\n)}:host{display:block;min-height:var(--spectrum-slider-height);min-width:var(--spectrum-slider-min-width);position:relative;-webkit-user-select:none;user-select:none;z-index:1}:host([dir=ltr]) #controls{margin-left:var(\n--spectrum-slider-controls-margin\n)}:host([dir=rtl]) #controls{margin-right:var(\n--spectrum-slider-controls-margin\n)}#controls{box-sizing:border-box;display:inline-block;min-height:var(--spectrum-slider-height);position:relative;vertical-align:top;width:calc(100% - var(--spectrum-slider-controls-margin)*2);z-index:auto}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{left:0}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{right:0}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{right:auto}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{left:auto}#fill,.track{box-sizing:border-box;height:var(\n--spectrum-slider-track-height\n);margin-top:calc(var(--spectrum-slider-track-height)/-2);pointer-events:none;position:absolute;top:calc(var(--spectrum-slider-height)/2);z-index:1}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{padding-left:0;padding-right:var(--spectrum-slider-track-handleoffset)}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{padding-left:var(--spectrum-slider-track-handleoffset);padding-right:0}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}#fill,.track{padding-bottom:0;padding-top:0}#fill:before,.track:before{border-radius:var(--spectrum-slider-track-border-radius);content:\"\";display:block;height:100%}:host([dir=ltr]) #fill{margin-left:0}:host([dir=rtl]) #fill{margin-right:0}:host([dir=ltr]) #fill{padding-left:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset));padding-right:0}:host([dir=rtl]) #fill{padding-left:0;padding-right:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset))}#fill{padding-bottom:0;padding-top:0}:host([dir=ltr]) .spectrum-Slider-fill--right{padding-left:0;padding-right:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset))}:host([dir=rtl]) .spectrum-Slider-fill--right{padding-left:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset));padding-right:0}.spectrum-Slider-fill--right{padding-bottom:0;padding-top:0}:host([dir=ltr]) .track~.track{left:auto}:host([dir=rtl]) .track~.track{right:auto}:host([dir=ltr]) .track~.track{right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl]) .track~.track{left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr]) .track~.track{padding-left:var(\n--spectrum-slider-track-handleoffset\n);padding-right:0}:host([dir=rtl]) .track~.track{padding-left:0;padding-right:var(\n--spectrum-slider-track-handleoffset\n)}:host([dir=ltr]) .track~.track{margin-left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl]) .track~.track{margin-right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr]) .track~.track{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) .track~.track{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}.track~.track{padding-bottom:0;padding-top:0}:host([variant=range]) #value{-webkit-user-select:text;user-select:text}:host([dir=ltr][variant=range]) .track:first-of-type{padding-left:0;padding-right:var(--spectrum-slider-track-handleoffset)}:host([dir=rtl][variant=range]) .track:first-of-type{padding-left:var(--spectrum-slider-track-handleoffset);padding-right:0}:host([dir=ltr][variant=range]) .track:first-of-type{left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl][variant=range]) .track:first-of-type{right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr][variant=range]) .track:first-of-type{right:auto}:host([dir=rtl][variant=range]) .track:first-of-type{left:auto}:host([dir=ltr][variant=range]) .track:first-of-type{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl][variant=range]) .track:first-of-type{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}:host([variant=range]) .track:first-of-type{padding-bottom:0;padding-top:0}:host([dir=ltr][variant=range]) [dir=ltr] .track,:host([dir=ltr][variant=range]) [dir=rtl] .track{left:auto}:host([dir=ltr][variant=range]) [dir=rtl] .track,:host([dir=rtl][variant=range]) [dir=rtl] .track{right:auto}:host([dir=ltr][variant=range]) [dir=ltr] .track,:host([dir=ltr][variant=range]) [dir=rtl] .track{right:auto}:host([dir=ltr][variant=range]) [dir=rtl] .track,:host([dir=rtl][variant=range]) [dir=rtl] .track{left:auto}:host([dir=ltr][variant=range]) .track,:host([dir=rtl][variant=range]) .track{margin:var(--spectrum-slider-range-track-reset);padding-bottom:0;padding-left:var(--spectrum-slider-track-middle-handleoffset);padding-right:var(--spectrum-slider-track-middle-handleoffset);padding-top:0}:host([dir=ltr][variant=range]) .track:last-of-type{padding-left:var(\n--spectrum-slider-track-handleoffset\n);padding-right:0}:host([dir=rtl][variant=range]) .track:last-of-type{padding-left:0;padding-right:var(\n--spectrum-slider-track-handleoffset\n)}:host([dir=ltr][variant=range]) .track:last-of-type{left:auto}:host([dir=rtl][variant=range]) .track:last-of-type{right:auto}:host([dir=ltr][variant=range]) .track:last-of-type{right:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=rtl][variant=range]) .track:last-of-type{left:var(\n--spectrum-slider-range-track-reset\n)}:host([dir=ltr][variant=range]) .track:last-of-type{margin-right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl][variant=range]) .track:last-of-type{margin-left:var(\n--spectrum-slider-track-margin-offset\n)}:host([variant=range]) .track:last-of-type{padding-bottom:0;padding-top:0}:host([dir=ltr]) #ramp{left:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) #ramp{right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=ltr]) #ramp{right:var(\n--spectrum-slider-track-margin-offset\n)}:host([dir=rtl]) #ramp{left:var(\n--spectrum-slider-track-margin-offset\n)}#ramp{height:var(--spectrum-slider-ramp-track-height);margin-top:var(\n--spectrum-slider-ramp-margin-top\n);position:absolute;top:calc(var(--spectrum-slider-ramp-track-height)/2)}:host([dir=rtl]) #ramp svg{transform:matrix(-1,0,0,1,0,0)}#ramp svg{height:100%;width:100%}:host([dir=ltr]) .handle{left:0}:host([dir=rtl]) .handle{right:0}:host([dir=ltr]) .handle{margin-left:calc(var(--spectrum-slider-handle-width)/-2);margin-right:0}:host([dir=rtl]) .handle{margin-left:0;margin-right:calc(var(--spectrum-slider-handle-width)/-2)}.handle{border-radius:var(--spectrum-slider-handle-border-radius);border-style:solid;border-width:var(--spectrum-slider-handle-border-size);box-sizing:border-box;display:inline-block;height:var(--spectrum-slider-handle-height);margin-bottom:0;margin-top:var(--spectrum-slider-handle-margin-top);outline:none;position:absolute;top:calc(var(--spectrum-slider-height)/2);transition:border-width var(--spectrum-slider-animation-duration) ease-in-out;width:var(--spectrum-slider-handle-width);z-index:2}.handle.dragging,.handle.handle-highlight,.handle:active{border-width:var(\n--spectrum-slider-handle-border-size\n)}.handle.dragging,.handle.handle-highlight,.handle.is-tophandle,.handle:active{z-index:3}.handle:before{border-radius:100%;content:\" \";display:block;height:var(--spectrum-slider-handle-height);left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);transition:box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out,width var(--spectrum-global-animation-duration-100,.13s) ease-out,height var(--spectrum-global-animation-duration-100,.13s) ease-out;width:var(--spectrum-slider-handle-width)}.handle.handle-highlight:before{height:calc(var(--spectrum-slider-handle-height) + var(\n--spectrum-alias-focus-ring-gap,\nvar(--spectrum-global-dimension-static-size-25)\n)*2);width:calc(var(--spectrum-slider-handle-width) + var(\n--spectrum-alias-focus-ring-gap,\nvar(--spectrum-global-dimension-static-size-25)\n)*2)}:host([dir=ltr]) .input{left:var(\n--spectrum-slider-input-left\n)}:host([dir=rtl]) .input{right:var(\n--spectrum-slider-input-left\n)}.input{-webkit-appearance:none;border:0;cursor:default;height:var(--spectrum-slider-handle-height);margin:0;opacity:.000001;overflow:hidden;padding:0;pointer-events:none;position:absolute;top:var(--spectrum-slider-input-top);width:var(--spectrum-slider-handle-width)}.input:focus{outline:none}#label-container{display:flex;font-size:var(--spectrum-slide-label-text-size);line-height:var(--spectrum-slide-label-text-line-height);margin-bottom:var(--spectrum-slide-label-margin-bottom);padding-top:var(\n--spectrum-fieldlabel-m-padding-top,var(--spectrum-global-dimension-size-50)\n);position:relative;width:auto}:host([dir=ltr]) #label{padding-left:0}:host([dir=rtl]) #label{padding-right:0}#label{flex-grow:1}:host([dir=ltr]) #value{padding-right:0}:host([dir=rtl]) #value{padding-left:0}:host([dir=ltr]) #value{text-align:right}:host([dir=rtl]) #value{text-align:left}#value{font-feature-settings:\"tnum\";cursor:default;flex-grow:0}:host([dir=ltr]) #value{margin-left:var(\n--spectrum-slider-label-gap-x\n)}:host([dir=rtl]) #value{margin-right:var(\n--spectrum-slider-label-gap-x\n)}.ticks{display:flex;justify-content:space-between;margin:0 var(--spectrum-slider-track-margin-offset);margin-top:calc(var(--spectrum-slider-tick-mark-height) + var(--spectrum-slider-track-height)/2);z-index:0}.tick{position:relative;width:var(--spectrum-slider-tick-mark-width)}:host([dir=ltr]) .tick:after{left:calc(50% - var(--spectrum-slider-tick-mark-width)/2)}:host([dir=rtl]) .tick:after{right:calc(50% - var(--spectrum-slider-tick-mark-width)/2)}.tick:after{border-radius:var(--spectrum-slider-tick-mark-border-radius);content:\"\";display:block;height:var(--spectrum-slider-tick-mark-height);position:absolute;top:0;width:var(--spectrum-slider-tick-mark-width)}.tick .tickLabel{align-items:center;display:flex;font-size:var(--spectrum-slide-label-text-size);justify-content:center;line-height:var(--spectrum-slide-label-text-line-height);margin-bottom:0;margin-left:calc(var(--spectrum-slider-label-gap-x)*-1);margin-right:calc(var(--spectrum-slider-label-gap-x)*-1);margin-top:calc(var(--spectrum-slider-label-gap-y) + var(--spectrum-slider-tick-mark-height))}.tick:first-of-type .tickLabel,.tick:last-of-type .tickLabel{display:block;margin-left:0;margin-right:0;position:absolute}:host([dir=ltr]) .tick:first-of-type{left:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=rtl]) .tick:first-of-type{right:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=ltr]) .tick:first-of-type .tickLabel{left:0}:host([dir=rtl]) .tick:first-of-type .tickLabel{right:0}:host([dir=ltr]) .tick:last-of-type{right:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=rtl]) .tick:last-of-type{left:calc(var(--spectrum-slider-tick-mark-width)/-2)}:host([dir=ltr]) .tick:last-of-type .tickLabel{right:0}:host([dir=rtl]) .tick:last-of-type .tickLabel{left:0}:host([disabled]){cursor:default}:host([disabled]) .handle{cursor:default;pointer-events:none}.spectrum-Slider-handleContainer,.spectrum-Slider-trackContainer{margin-left:calc(var(--spectrum-slider-handle-width)/2*-1);position:absolute;top:calc(var(--spectrum-slider-track-height)/2 - 1px);width:calc(100% + var(--spectrum-slider-handle-width))}.spectrum-Slider-trackContainer{height:var(--spectrum-slider-height);overflow:hidden}:host{--spectrum-slider-m-focus-ring-size:var(\n--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)\n);--spectrum-slider-m-handle-border-color-key-focus:var(\n--spectrum-global-color-gray-800\n);--spectrum-slider-m-handle-focus-ring-color-key-focus:var(\n--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400)\n);--spectrum-slider-m-label-text-color:var(\n--spectrum-alias-label-text-color,var(--spectrum-global-color-gray-700)\n);--spectrum-slider-m-label-text-color-disabled:var(\n--spectrum-alias-text-color-disabled,var(--spectrum-global-color-gray-500)\n)}.track:before{background:var(\n--spectrum-slider-m-track-color,var(--spectrum-global-color-gray-400)\n)}#label-container{color:var(\n--spectrum-slider-m-label-text-color\n)}:host([variant=filled]) .track:first-child:before{background:var(\n--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700)\n)}#fill:before{background:var(\n--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700)\n)}#ramp path{fill:var(\n--spectrum-slider-m-track-color,var(--spectrum-global-color-gray-400)\n)}.handle{background:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);border-color:var(\n--spectrum-slider-m-handle-border-color,var(--spectrum-global-color-gray-700)\n)}.handle:hover{border-color:var(\n--spectrum-slider-m-handle-border-color-hover,var(--spectrum-global-color-gray-800)\n)}.handle.handle-highlight{border-color:var(\n--spectrum-slider-m-handle-border-color-key-focus,var(--spectrum-global-color-gray-800)\n)}.handle.handle-highlight:before{box-shadow:0 0 0 var(\n--spectrum-slider-m-focus-ring-size,var(--spectrum-alias-focus-ring-size)\n) var(--spectrum-slider-m-handle-focus-ring-color-key-focus)}.handle.dragging,.handle:active{border-color:var(\n--spectrum-slider-m-handle-border-color-down,var(--spectrum-global-color-gray-800)\n)}:host([variant=ramp]) .handle{box-shadow:0 0 0 4px var(\n--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100)\n)}.input{background:transparent}.tick:after{background-color:var(\n--spectrum-slider-m-tick-mark-color,var(--spectrum-global-color-gray-400)\n)}.handle.dragging{background:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);border-color:var(\n--spectrum-slider-m-handle-border-color-down,var(--spectrum-global-color-gray-800)\n)}:host([variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(\n--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700)\n)}:host([disabled]) #label-container{color:var(\n--spectrum-slider-m-label-text-color-disabled\n)}:host([disabled]) .handle{background:var(\n--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100)\n);border-color:var(\n--spectrum-slider-m-handle-border-color-disabled,var(--spectrum-global-color-gray-400)\n)}:host([disabled]) .handle:active,:host([disabled]) .handle:hover{background:var(\n--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent)\n);border-color:var(\n--spectrum-slider-m-handle-border-color-disabled,var(--spectrum-global-color-gray-400)\n)}:host([disabled]) .track:before{background:var(\n--spectrum-slider-m-track-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host([disabled][variant=filled]) .track:first-child:before{background:var(\n--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host([disabled]) #fill:before{background:var(\n--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300)\n)}:host([disabled]) #ramp path{fill:var(\n--spectrum-slider-ramp-track-color-disabled\n)}:host([disabled][variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(\n--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300)\n)}\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "styles",
            "module": "src/spectrum-slider.css.ts"
          }
        }
      ]
    }
  ]
}
