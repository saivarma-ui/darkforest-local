import { CSSResultArray, TemplateResult } from '@spectrum-web-components/base';
import '@spectrum-web-components/field-label/sp-field-label.js';
import type { NumberField } from '@spectrum-web-components/number-field';
import { HandleController, HandleValueDictionary } from './HandleController.js';
import { SliderHandle } from './SliderHandle.js';
export declare const variants: string[];
declare const Slider_base: typeof SliderHandle & {
    new (...args: any[]): import("@spectrum-web-components/shared/src/observe-slot-text.js").SlotTextObservingInterface;
    prototype: import("@spectrum-web-components/shared/src/observe-slot-text.js").SlotTextObservingInterface;
};
/**
 * @element sp-slider
 *
 * @slot - text label for the Slider
 */
export declare class Slider extends Slider_base {
    static get styles(): CSSResultArray;
    handleController: HandleController;
    /**
     * Whether to display a Number Field along side the slider UI
     */
    get editable(): boolean;
    set editable(editable: boolean);
    private _editable;
    /**
     * Whether the stepper UI of the Number Field is hidden or not
     */
    hideStepper: boolean;
    type: string;
    set variant(variant: string);
    get variant(): string;
    get values(): HandleValueDictionary;
    get handleName(): string;
    private _variant;
    getAriaValueText: (values: Map<string, string>) => string;
    get ariaValueText(): string;
    labelVisibility?: 'text' | 'value' | 'none';
    min: number;
    max: number;
    step: number;
    tickStep: number;
    tickLabels: boolean;
    disabled: boolean;
    labelEl: HTMLLabelElement;
    numberField: NumberField;
    track: HTMLDivElement;
    get numberFormat(): Intl.NumberFormat;
    get focusElement(): HTMLElement;
    protected handleLabelClick(event: Event): void;
    protected render(): TemplateResult;
    connectedCallback(): void;
    disconnectedCallback(): void;
    update(changedProperties: Map<string, boolean>): void;
    private renderLabel;
    private renderRamp;
    private renderTicks;
    private renderTrackSegment;
    private renderTrack;
    protected handlePointerdown(event: PointerEvent): void;
    protected handlePointermove(event: PointerEvent): void;
    protected handlePointerup(event: PointerEvent): void;
    private handleNumberInput;
    private handleNumberChange;
    private trackSegmentStyles;
    private _numberFieldInput;
    protected getUpdateComplete(): Promise<boolean>;
}
export {};
