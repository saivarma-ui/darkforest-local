{"version":3,"file":"SliderHandle.js","sourceRoot":"","sources":["SliderHandle.ts"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { PropertyValues } from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\nimport { ProvideLang } from '@spectrum-web-components/theme';\nimport {\n    NumberFormatOptions,\n    NumberFormatter,\n} from '@internationalized/number';\n\nexport type HandleMin = number | 'previous';\nexport type HandleMax = number | 'next';\n\nexport type HandleValues = {\n    name: string;\n    value: number;\n}[];\n\nexport interface Controller {\n    inputForHandle(handle: SliderHandle): HTMLInputElement | undefined;\n    requestUpdate(): void;\n    setValueFromHandle(handle: SliderHandle): void;\n    handleHasChanged(handle: SliderHandle): void;\n}\n\nexport type SliderNormalization = {\n    toNormalized: (value: number, min: number, max: number) => number;\n    fromNormalized: (value: number, min: number, max: number) => number;\n};\n\nexport const defaultNormalization: SliderNormalization = {\n    toNormalized(value: number, min: number, max: number) {\n        return (value - min) / (max - min);\n    },\n    fromNormalized(value: number, min: number, max: number) {\n        return value * (max - min) + min;\n    },\n};\n\nconst MinConverter = {\n    fromAttribute: (value: string): number | 'previous' => {\n        if (value === 'previous') return value;\n        return parseFloat(value);\n    },\n    toAttribute: (value: 'previous' | number): string => {\n        return value.toString();\n    },\n};\n\nconst MaxConverter = {\n    fromAttribute: (value: string): number | 'next' => {\n        if (value === 'next') return value;\n        return parseFloat(value);\n    },\n    toAttribute: (value: 'next' | number): string => {\n        return value.toString();\n    },\n};\n\n/**\n * @element sp-slider-handle\n *\n * @fires input - The value of the element has changed.\n * @fires change - An alteration to the value of the element has been committed by the user.\n */\nexport class SliderHandle extends Focusable {\n    public handleController?: Controller;\n\n    public get handleName(): string {\n        return this.name;\n    }\n\n    public get focusElement(): HTMLElement {\n        /* c8 ignore next */\n        return this.handleController?.inputForHandle(this) ?? this;\n    }\n\n    _forcedUnit = '';\n\n    @property({ type: Number })\n    value = 10;\n\n    @property({ type: Boolean, reflect: true })\n    public dragging = false;\n\n    @property({ type: Boolean })\n    public highlight = false;\n\n    @property({ type: String })\n    public name = '';\n\n    @property({ reflect: true, converter: MinConverter })\n    public min?: number | 'previous';\n\n    @property({ reflect: true, converter: MaxConverter })\n    public max?: number | 'next';\n\n    @property({ attribute: false })\n    private resolvedLanguage =\n        document.documentElement.lang || navigator.language;\n\n    @property({ type: Number, reflect: true })\n    public step?: number;\n\n    @property({ type: Object, attribute: 'format-options' })\n    public formatOptions?: NumberFormatOptions;\n\n    @property({ type: String })\n    public label = '';\n\n    @property({ attribute: false })\n    public getAriaHandleText: (\n        value: number,\n        numberFormat: NumberFormatter\n    ) => string = (value, numberFormat) => {\n        return numberFormat.format(value);\n    };\n\n    protected update(changes: PropertyValues): void {\n        if (changes.has('formatOptions') || changes.has('resolvedLanguage')) {\n            delete this._numberFormatCache;\n        }\n        super.update(changes);\n    }\n\n    protected updated(changedProperties: PropertyValues<this>): void {\n        if (changedProperties.has('value')) {\n            const oldValue = changedProperties.get('value');\n            if (oldValue != null) {\n                this.handleController /* c8 ignore next */\n                    ?.setValueFromHandle(this);\n            }\n        }\n        this.handleController?.handleHasChanged(this);\n        super.updated(changedProperties);\n    }\n\n    protected firstUpdated(changedProperties: PropertyValues<this>): void {\n        super.firstUpdated(changedProperties);\n        this.dispatchEvent(new CustomEvent('sp-slider-handle-ready'));\n    }\n\n    @property({ attribute: false })\n    public normalization: SliderNormalization = defaultNormalization;\n\n    public dispatchInputEvent(): void {\n        const inputEvent = new Event('input', {\n            bubbles: true,\n            composed: true,\n        });\n\n        this.dispatchEvent(inputEvent);\n    }\n\n    protected _numberFormatCache:\n        | { numberFormat: NumberFormatter; language: string }\n        | undefined;\n    protected getNumberFormat(): Intl.NumberFormat {\n        /* c8 ignore next */\n        if (\n            !this._numberFormatCache ||\n            this.resolvedLanguage !== this._numberFormatCache.language\n        ) {\n            let numberFormatter: NumberFormatter;\n            try {\n                numberFormatter = new NumberFormatter(\n                    this.resolvedLanguage,\n                    this.formatOptions\n                );\n                this._forcedUnit = '';\n                // numberFormatter.format(1);\n            } catch (error) {\n                const {\n                    style,\n                    unit,\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    unitDisplay,\n                    ...formatOptionsNoUnit\n                } = this.formatOptions || {};\n                if (style === 'unit') {\n                    this._forcedUnit = unit as string;\n                }\n                numberFormatter = new NumberFormatter(\n                    this.resolvedLanguage,\n                    formatOptionsNoUnit\n                );\n            }\n            this._numberFormatCache = {\n                language: this.resolvedLanguage,\n                numberFormat: numberFormatter,\n            };\n        }\n        /* c8 ignore next */\n        return this._numberFormatCache?.numberFormat;\n    }\n\n    public get numberFormat(): NumberFormatter | undefined {\n        if (!this.formatOptions) return;\n        return this.getNumberFormat();\n    }\n\n    public connectedCallback(): void {\n        super.connectedCallback();\n        this.resolveLanguage();\n    }\n\n    public disconnectedCallback(): void {\n        this.resolveLanguage();\n        super.disconnectedCallback();\n    }\n\n    private resolveLanguage(): void {\n        const queryThemeEvent = new CustomEvent<ProvideLang>(\n            'sp-language-context',\n            {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    callback: (lang: string) => {\n                        this.resolvedLanguage = lang;\n                    },\n                },\n                cancelable: true,\n            }\n        );\n        this.dispatchEvent(queryThemeEvent);\n    }\n}\n"]}