/*
Copyright 2021 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
import { __decorate, __rest } from "tslib";
import { property } from '@spectrum-web-components/base/src/decorators.js';
import { Focusable } from '@spectrum-web-components/shared/src/focusable.js';
import { NumberFormatter, } from '@internationalized/number';
export const defaultNormalization = {
    toNormalized(value, min, max) {
        return (value - min) / (max - min);
    },
    fromNormalized(value, min, max) {
        return value * (max - min) + min;
    },
};
const MinConverter = {
    fromAttribute: (value) => {
        if (value === 'previous')
            return value;
        return parseFloat(value);
    },
    toAttribute: (value) => {
        return value.toString();
    },
};
const MaxConverter = {
    fromAttribute: (value) => {
        if (value === 'next')
            return value;
        return parseFloat(value);
    },
    toAttribute: (value) => {
        return value.toString();
    },
};
/**
 * @element sp-slider-handle
 *
 * @fires input - The value of the element has changed.
 * @fires change - An alteration to the value of the element has been committed by the user.
 */
export class SliderHandle extends Focusable {
    constructor() {
        super(...arguments);
        this._forcedUnit = '';
        this.value = 10;
        this.dragging = false;
        this.highlight = false;
        this.name = '';
        this.resolvedLanguage = document.documentElement.lang || navigator.language;
        this.label = '';
        this.getAriaHandleText = (value, numberFormat) => {
            return numberFormat.format(value);
        };
        this.normalization = defaultNormalization;
    }
    get handleName() {
        return this.name;
    }
    get focusElement() {
        var _a, _b;
        /* c8 ignore next */
        return (_b = (_a = this.handleController) === null || _a === void 0 ? void 0 : _a.inputForHandle(this)) !== null && _b !== void 0 ? _b : this;
    }
    update(changes) {
        if (changes.has('formatOptions') || changes.has('resolvedLanguage')) {
            delete this._numberFormatCache;
        }
        super.update(changes);
    }
    updated(changedProperties) {
        var _a, _b;
        if (changedProperties.has('value')) {
            const oldValue = changedProperties.get('value');
            if (oldValue != null) {
                (_a = this.handleController /* c8 ignore next */) === null || _a === void 0 ? void 0 : _a.setValueFromHandle(this);
            }
        }
        (_b = this.handleController) === null || _b === void 0 ? void 0 : _b.handleHasChanged(this);
        super.updated(changedProperties);
    }
    firstUpdated(changedProperties) {
        super.firstUpdated(changedProperties);
        this.dispatchEvent(new CustomEvent('sp-slider-handle-ready'));
    }
    dispatchInputEvent() {
        const inputEvent = new Event('input', {
            bubbles: true,
            composed: true,
        });
        this.dispatchEvent(inputEvent);
    }
    getNumberFormat() {
        var _a;
        /* c8 ignore next */
        if (!this._numberFormatCache ||
            this.resolvedLanguage !== this._numberFormatCache.language) {
            let numberFormatter;
            try {
                numberFormatter = new NumberFormatter(this.resolvedLanguage, this.formatOptions);
                this._forcedUnit = '';
                // numberFormatter.format(1);
            }
            catch (error) {
                const _b = this.formatOptions || {}, { style, unit, 
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                unitDisplay } = _b, formatOptionsNoUnit = __rest(_b, ["style", "unit", "unitDisplay"]);
                if (style === 'unit') {
                    this._forcedUnit = unit;
                }
                numberFormatter = new NumberFormatter(this.resolvedLanguage, formatOptionsNoUnit);
            }
            this._numberFormatCache = {
                language: this.resolvedLanguage,
                numberFormat: numberFormatter,
            };
        }
        /* c8 ignore next */
        return (_a = this._numberFormatCache) === null || _a === void 0 ? void 0 : _a.numberFormat;
    }
    get numberFormat() {
        if (!this.formatOptions)
            return;
        return this.getNumberFormat();
    }
    connectedCallback() {
        super.connectedCallback();
        this.resolveLanguage();
    }
    disconnectedCallback() {
        this.resolveLanguage();
        super.disconnectedCallback();
    }
    resolveLanguage() {
        const queryThemeEvent = new CustomEvent('sp-language-context', {
            bubbles: true,
            composed: true,
            detail: {
                callback: (lang) => {
                    this.resolvedLanguage = lang;
                },
            },
            cancelable: true,
        });
        this.dispatchEvent(queryThemeEvent);
    }
}
__decorate([
    property({ type: Number })
], SliderHandle.prototype, "value", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], SliderHandle.prototype, "dragging", void 0);
__decorate([
    property({ type: Boolean })
], SliderHandle.prototype, "highlight", void 0);
__decorate([
    property({ type: String })
], SliderHandle.prototype, "name", void 0);
__decorate([
    property({ reflect: true, converter: MinConverter })
], SliderHandle.prototype, "min", void 0);
__decorate([
    property({ reflect: true, converter: MaxConverter })
], SliderHandle.prototype, "max", void 0);
__decorate([
    property({ attribute: false })
], SliderHandle.prototype, "resolvedLanguage", void 0);
__decorate([
    property({ type: Number, reflect: true })
], SliderHandle.prototype, "step", void 0);
__decorate([
    property({ type: Object, attribute: 'format-options' })
], SliderHandle.prototype, "formatOptions", void 0);
__decorate([
    property({ type: String })
], SliderHandle.prototype, "label", void 0);
__decorate([
    property({ attribute: false })
], SliderHandle.prototype, "getAriaHandleText", void 0);
__decorate([
    property({ attribute: false })
], SliderHandle.prototype, "normalization", void 0);
//# sourceMappingURL=SliderHandle.js.map