{"version":3,"file":"HelpTextManager.js","sourceRoot":"","sources":["HelpTextManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\nimport type { HelpText } from './HelpText';\n\nexport class HelpTextManager {\n    private hadId = false;\n    private host!: HTMLElement;\n    public id!: string;\n    private mode: 'internal' | 'external' = 'internal';\n    private previousTabindex?: -1 | 0 | undefined;\n    private helpTextElement!: Element;\n    private get isInternal(): boolean {\n        return this.mode === 'internal';\n    }\n\n    static instanceCount = 0;\n    instanceCount: number;\n\n    constructor(\n        host: HTMLElement,\n        { mode }: { mode: 'internal' | 'external' } = { mode: 'internal' }\n    ) {\n        this.host = host;\n        this.instanceCount = HelpTextManager.instanceCount++;\n        this.id = `sp-help-text-${this.instanceCount}`;\n        this.mode = mode;\n    }\n\n    public render(negative?: boolean): TemplateResult {\n        // `pass-through-help-text-${this.instanceCount}` makes the slot effectively unreachable from\n        // the outside allowing the `help-text` slot to be preferred while `negative === false`.\n        return html`\n            <div id=${ifDefined(this.isInternal ? this.id : undefined)}>\n                <slot\n                    name=${negative\n                        ? 'negative-help-text'\n                        : `pass-through-help-text-${this.instanceCount}`}\n                    @slotchange=${this.handleSlotchange}\n                >\n                    <slot name=\"help-text\"></slot>\n                </slot>\n            </div>\n        `;\n    }\n\n    private addId(): void {\n        const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n        const ariaDescribedby = this.host.getAttribute('aria-describedby');\n        const descriptors = ariaDescribedby ? ariaDescribedby.split(/\\s+/) : [];\n        this.hadId = descriptors.indexOf(id) > -1;\n        if (this.hadId) return;\n        descriptors.push(id);\n        this.host.setAttribute('aria-describedby', descriptors.join(' '));\n        if (this.host.hasAttribute('tabindex')) {\n            this.previousTabindex = parseFloat(\n                this.host.getAttribute('tabindex') as string\n            ) as -1 | 0;\n        }\n        this.host.tabIndex = 0;\n    }\n\n    private removeId(): void {\n        const ariaDescribedby = this.host.getAttribute('aria-describedby');\n        let descriptors = ariaDescribedby ? ariaDescribedby.split(/\\s+/) : [];\n        if (!this.hadId) {\n            const id = this.helpTextElement ? this.helpTextElement.id : this.id;\n            descriptors = descriptors.filter((descriptor) => descriptor !== id);\n        }\n        if (descriptors.length) {\n            this.host.setAttribute('aria-describedby', descriptors.join(' '));\n        } else {\n            this.host.removeAttribute('aria-describedby');\n        }\n        if (this.helpTextElement) return;\n        if (this.previousTabindex) {\n            this.host.tabIndex = this.previousTabindex;\n        } else {\n            this.host.removeAttribute('tabindex');\n        }\n    }\n\n    private handleSlotchange = ({\n        target,\n    }: Event & { target: HTMLSlotElement }): void => {\n        this.handleHelpText(target);\n        this.handleNegativeHelpText(target);\n    };\n\n    private handleHelpText(target: HTMLSlotElement): void {\n        if (this.isInternal) return;\n\n        if (this.helpTextElement && this.helpTextElement.id === this.id) {\n            this.helpTextElement.removeAttribute('id');\n        }\n        this.removeId();\n        const assignedElements = target.assignedElements();\n        const nextHelpTextElement = assignedElements[0];\n        this.helpTextElement = nextHelpTextElement;\n        if (nextHelpTextElement) {\n            if (!nextHelpTextElement.id) {\n                nextHelpTextElement.id = this.id;\n            }\n            this.addId();\n        }\n    }\n\n    private handleNegativeHelpText(target: HTMLSlotElement): void {\n        if (target.name !== 'negative-help-text') return;\n\n        const assignedElements = target.assignedElements();\n        assignedElements.forEach(\n            (el) => ((el as unknown as HelpText).variant = 'negative')\n        );\n    }\n}\n"]}