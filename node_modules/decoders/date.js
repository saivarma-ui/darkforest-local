"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iso8601 = exports.date = void 0;

var _debrief = require("debrief");

var _Result = require("lemons/Result");

var _string = require("./string");

var _utils = require("./utils");

// Only matches the shape.  This "over-matches" some values that still aren't
// valid dates (like 9999-99-99), but those will be caught by JS Date's
// internal validations
var iso8601_re = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.]\d+)?(?:Z|[+-]\d{2}:?\d{2})$/;

var date = function date(value) {
  return (0, _utils.isDate)(value) ? (0, _Result.Ok)(value) : (0, _Result.Err)((0, _debrief.annotate)(value, 'Must be a Date'));
};
/**
 * Decoder that only returns Ok for strings that are valid ISO8601 date
 * strings.  Err otherwise.
 */


exports.date = date;
var iso8601 = (0, _utils.map)( // Input itself needs to match the ISO8601 regex...
(0, _string.regex)(iso8601_re, 'Must be ISO8601 format'), // Make sure it is a _valid_ date
function (value) {
  var date = new Date(value);

  if (isNaN(date.getTime())) {
    throw new Error('Must be valid date/time value');
  }

  return date;
});
exports.iso8601 = iso8601;