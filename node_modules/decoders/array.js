"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.array = array;
exports.nonEmptyArray = nonEmptyArray;
exports.poja = void 0;

var _debrief = require("debrief");

var _Result = require("lemons/Result");

var _utils = require("./utils");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Like a "Plain Old JavaScript Object", but for arrays: "Plain Old JavaScript
 * Array" ^_^
 */
var poja = function poja(blob) {
  if (!Array.isArray(blob)) {
    return (0, _Result.Err)((0, _debrief.annotate)(blob, 'Must be an array'));
  }

  return (0, _Result.Ok)( // NOTE: Since Flow 0.98, Array.isArray() returns $ReadOnlyArray<mixed>
  // instead of Array<mixed>.  For rationale, see
  // https://github.com/facebook/flow/issues/7684.  In this case, we
  // don't want to output read-only types because it's up to the user of
  // decoders to determine what they want to do with the decoded output.
  // If they want to write items into the array, that's fine!
  // The fastest way to turn a read-only array into a normal array in
  // Javascript is to use .slice() on it, see this benchmark:
  // http://jsben.ch/lO6C5
  blob.slice());
};
/**
 * Given an iterable of Result instances, exhaust them all and return:
 * - An [index, err] tuple, indicating the (index of the) first Err instance
 *   encountered; or
 * - a new Ok with an array of all unwrapped Ok'ed values
 */


exports.poja = poja;

function all(iterable, blobs) {
  var results = [];
  var index = 0;

  var _iterator = _createForOfIteratorHelper(iterable),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var result = _step.value;

      try {
        var value = result.unwrap();
        results.push(value);
      } catch (ann) {
        // Rewrite the annotation to include the index information, and inject it into the original blob
        var clone = _toConsumableArray(blobs);

        clone.splice(index, 1, (0, _debrief.annotate)(ann, ann.annotation !== undefined ? "".concat(ann.annotation, " (at index ").concat(index, ")") : "index ".concat(index))); // const errValue = [];
        // if (index > 0) {
        //     errValue.push('...'); // TODO: make special mark, not string!
        // }
        // errValue.push(
        // );
        // if (index < iterable.length - 1) {
        //     errValue.push('...'); // TODO: make special mark, not string!
        // }

        return (0, _Result.Err)((0, _debrief.annotate)(clone));
      }

      index++;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return (0, _Result.Ok)(results);
}
/**
 * Given a T, builds a decoder that assumes an array input and returns an
 * Array<T>.
 */


function members(decoder) {
  return function (blobs) {
    var results = blobs.map(decoder);
    var result = all(results, blobs);
    return result;
  };
}
/**
 * Builds a Decoder that returns Ok for values of `Array<T>`, given a Decoder
 * for `T`.  Err otherwise.
 */


function array(decoder) {
  return (0, _utils.compose)(poja, members(decoder));
}
/**
 * Builds a Decoder that returns Ok for values of `Array<T>`, but will reject
 * empty arrays.
 */


function nonEmptyArray(decoder) {
  return (0, _utils.compose)(array(decoder), (0, _utils.predicate)(function (arr) {
    return arr.length > 0;
  }, 'Must be non-empty array'));
}