"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tuple1 = tuple1;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.tuple5 = tuple5;
exports.tuple6 = tuple6;

var _debrief = require("debrief");

var _Result = require("lemons/Result");

var _array = require("./array");

var _utils = require("./utils");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ntuple = function ntuple(n) {
  return (0, _utils.compose)(_array.poja, (0, _utils.predicate)(function (arr) {
    return arr.length === n;
  }, "Must be a ".concat(n, "-tuple")));
};
/**
 * Builds a Decoder that returns Ok for 1-tuple of [T], given a Decoder for T.
 * Err otherwise.
 */


function tuple1(decoder1) {
  return (0, _utils.compose)(ntuple(1), function (blobs) {
    var _blobs = _slicedToArray(blobs, 1),
        blob1 = _blobs[0];

    var result1 = decoder1(blob1);

    try {
      return (0, _Result.Ok)([result1.unwrap()]);
    } catch (e) {
      // If a decoder error has happened while unwrapping all the
      // results, try to construct a good error message
      return (0, _Result.Err)((0, _debrief.annotate)(result1.errValue()));
    }
  });
}
/**
 * Builds a Decoder that returns Ok for 2-tuples of [T1, T2], given Decoders
 * for T1 and T2.  Err otherwise.
 */


function tuple2(decoder1, decoder2) {
  return (0, _utils.compose)(ntuple(2), function (blobs) {
    var _blobs2 = _slicedToArray(blobs, 2),
        blob1 = _blobs2[0],
        blob2 = _blobs2[1];

    var result1 = decoder1(blob1);
    var result2 = decoder2(blob2);

    try {
      return (0, _Result.Ok)([result1.unwrap(), result2.unwrap()]);
    } catch (e) {
      // If a decoder error has happened while unwrapping all the
      // results, try to construct a good error message
      return (0, _Result.Err)((0, _debrief.annotate)([result1.isErr() ? result1.errValue() : result1.value(), result2.isErr() ? result2.errValue() : result2.value()]));
    }
  });
}
/**
 * Builds a Decoder that returns Ok for 3-tuples of [T1, T2, T3], given
 * Decoders for T1, T2, and T3.  Err otherwise.
 */


function tuple3(decoder1, decoder2, decoder3) {
  return (0, _utils.compose)(ntuple(3), function (blobs) {
    var _blobs3 = _slicedToArray(blobs, 3),
        blob1 = _blobs3[0],
        blob2 = _blobs3[1],
        blob3 = _blobs3[2];

    var result1 = decoder1(blob1);
    var result2 = decoder2(blob2);
    var result3 = decoder3(blob3);

    try {
      return (0, _Result.Ok)([result1.unwrap(), result2.unwrap(), result3.unwrap()]);
    } catch (e) {
      // If a decoder error has happened while unwrapping all the
      // results, try to construct a good error message
      return (0, _Result.Err)((0, _debrief.annotate)([result1.isErr() ? result1.errValue() : result1.value(), result2.isErr() ? result2.errValue() : result2.value(), result3.isErr() ? result3.errValue() : result3.value()]));
    }
  });
}
/**
 * Builds a Decoder that returns Ok for 4-tuples of [T1, T2, T3, T4], given
 * Decoders for T1, T2, T3, and T4.  Err otherwise.
 */


function tuple4(decoder1, decoder2, decoder3, decoder4) {
  return (0, _utils.compose)(ntuple(4), function (blobs) {
    var _blobs4 = _slicedToArray(blobs, 4),
        blob1 = _blobs4[0],
        blob2 = _blobs4[1],
        blob3 = _blobs4[2],
        blob4 = _blobs4[3];

    var result1 = decoder1(blob1);
    var result2 = decoder2(blob2);
    var result3 = decoder3(blob3);
    var result4 = decoder4(blob4);

    try {
      return (0, _Result.Ok)([result1.unwrap(), result2.unwrap(), result3.unwrap(), result4.unwrap()]);
    } catch (e) {
      // If a decoder error has happened while unwrapping all the
      // results, try to construct a good error message
      return (0, _Result.Err)((0, _debrief.annotate)([result1.isErr() ? result1.errValue() : result1.value(), result2.isErr() ? result2.errValue() : result2.value(), result3.isErr() ? result3.errValue() : result3.value(), result4.isErr() ? result4.errValue() : result4.value()]));
    }
  });
}
/**
 * Builds a Decoder that returns Ok for 5-tuples of [T1, T2, T3, T4, T5], given
 * Decoders for T1, T2, T3, T4, and T5.  Err otherwise.
 */


function tuple5(decoder1, decoder2, decoder3, decoder4, decoder5) {
  return (0, _utils.compose)(ntuple(5), function (blobs) {
    var _blobs5 = _slicedToArray(blobs, 5),
        blob1 = _blobs5[0],
        blob2 = _blobs5[1],
        blob3 = _blobs5[2],
        blob4 = _blobs5[3],
        blob5 = _blobs5[4];

    var result1 = decoder1(blob1);
    var result2 = decoder2(blob2);
    var result3 = decoder3(blob3);
    var result4 = decoder4(blob4);
    var result5 = decoder5(blob5);

    try {
      return (0, _Result.Ok)([result1.unwrap(), result2.unwrap(), result3.unwrap(), result4.unwrap(), result5.unwrap()]);
    } catch (e) {
      // If a decoder error has happened while unwrapping all the
      // results, try to construct a good error message
      return (0, _Result.Err)((0, _debrief.annotate)([result1.isErr() ? result1.errValue() : result1.value(), result2.isErr() ? result2.errValue() : result2.value(), result3.isErr() ? result3.errValue() : result3.value(), result4.isErr() ? result4.errValue() : result4.value(), result5.isErr() ? result5.errValue() : result5.value()]));
    }
  });
}
/**
 * Builds a Decoder that returns Ok for 5-tuples of [T1, T2, T3, T4, T5], given
 * Decoders for T1, T2, T3, T4, T5, and T6.  Err otherwise.
 */


function tuple6(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6) {
  return (0, _utils.compose)(ntuple(6), function (blobs) {
    var _blobs6 = _slicedToArray(blobs, 6),
        blob1 = _blobs6[0],
        blob2 = _blobs6[1],
        blob3 = _blobs6[2],
        blob4 = _blobs6[3],
        blob5 = _blobs6[4],
        blob6 = _blobs6[5];

    var result1 = decoder1(blob1);
    var result2 = decoder2(blob2);
    var result3 = decoder3(blob3);
    var result4 = decoder4(blob4);
    var result5 = decoder5(blob5);
    var result6 = decoder6(blob6);

    try {
      return (0, _Result.Ok)([result1.unwrap(), result2.unwrap(), result3.unwrap(), result4.unwrap(), result5.unwrap(), result6.unwrap()]);
    } catch (e) {
      // If a decoder error has happened while unwrapping all the
      // results, try to construct a good error message
      return (0, _Result.Err)((0, _debrief.annotate)([result1.isErr() ? result1.errValue() : result1.value(), result2.isErr() ? result2.errValue() : result2.value(), result3.isErr() ? result3.errValue() : result3.value(), result4.isErr() ? result4.errValue() : result4.value(), result5.isErr() ? result5.errValue() : result5.value(), result6.isErr() ? result6.errValue() : result6.value()]));
    }
  });
}